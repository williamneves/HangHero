import { type NextPage } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";

const hangmanWords: string[] = [
  "ability",
  "absence",
  "academy",
  "account",
  "address",
  "advance",
  "advice",
  "arrival",
  "article",
  "athlete",
  "attempt",
  "balance",
  "battery",
  "believe",
  "brother",
  "capital",
  "capture",
  "central",
  "ceremony",
  "chamber",
  "channel",
  "climate",
  "college",
  "company",
  "compare",
  "complex",
  "confirm",
  "connect",
  "control",
  "courage",
  "culture",
  "declare",
  "default",
  "defense",
  "deliver",
  "despite",
  "display",
  "economy",
  "elegant",
  "element",
  "embrace",
  "emerge",
  "enforce",
  "enhance",
  "example",
  "expense",
  "explain",
  "express",
  "fashion",
  "feature",
  "finance",
  "freedom",
  "gallery",
  "general",
  "gravity",
  "harvest",
  "history",
  "holiday",
  "imagine",
  "improve",
  "include",
  "inspire",
  "intense",
  "journey",
  "justice",
  "kingdom",
  "library",
  "license",
  "loyalty",
  "manager",
  "measure",
  "mention",
  "message",
  "mission",
  "mistake",
  "monitor",
  "mystery",
  "natural",
  "opinion",
  "package",
  "partner",
  "pattern",
  "perform",
  "picture",
  "plastic",
  "present",
  "private",
  "produce",
  "project",
  "promise",
  "protect",
  "protest",
  "purpose",
  "quality",
  "recover",
  "reflect",
  "refresh",
  "release",
  "request",
  "respect",
  "revenue",
  "romance",
  "section",
  "segment",
  "serious",
  "service",
  "sibling",
  "society",
  "station",
  "strange",
  "stretch",
  "support",
  "survive",
  "teacher",
  "thought",
  "traffic",
  "version",
  "victory",
  "village",
  "visible",
];

// You can access a random word from the array as follows:
const randomIndex = Math.floor(Math.random() * hangmanWords.length);
const randomWord = (): string => hangmanWords[randomIndex] as string;



const Home: NextPage = () => {

  // States
  const [word, setWord] = useState(randomWord());
  const [guess, setGuess] = useState("");
  const [guesses, setGuesses] = useState<[] | string[]>([]);
  const [wrongGuesses, setWrongGuesses] = useState(0);
  const [gameState, setGameState] = useState<"playing" | "won" | "loose">("playing");
  const [wordLetters, setWordLetters] = useState(new Map<string, boolean>());
  const [errorMessage, setErrorMessage] = useState<string>("");

  // Handle input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {

    // Each change, reset the error message
    setErrorMessage("");

    // Only allow letters
    if (!e.target.value.match(/^[a-zA-Z]+$/)) { 
      setErrorMessage("You can only guess letters");
      return;
    }

    // The field is only one character long, so replace the value to be always the last character
    setGuess(e.target.value[e.target.value.length - 1] as string);
  };

  // Handlers
  const handleGuess = () => {
    if (guess.length > 1) {
      setErrorMessage("You can only guess one letter at a time");
      return;
    };

    setGuesses((prev) => [...prev, guess]);

    setGuess("");
  };

  const handleReset = () => {
    setWord(randomWord());
    setGuess("");
    setGuesses([]);
    setWrongGuesses(0);
    setGameState("playing");
    setWordLetters(new Map<string, boolean>());
    setErrorMessage("");
  };

  // After word is set, create a map of the word letters
  useEffect(() => {
    
    word.split("").forEach((letter) => {
      setWordLetters((prev) => {
        return new Map(prev).set(letter, false);
      });
    });
    
  }, [word]);

  // After guesses has changed, check if the guess is in the word
  useEffect(() => {
    if (guesses.length > 0) {
      const lastGuess = guesses[guesses.length - 1] as string;
      if (word.includes(lastGuess)) {
        setWordLetters((prev) => {
          return new Map(prev).set(lastGuess, true);
        });
      } else {
        setWrongGuesses((prev) => prev + 1);
      }
    }
  }, [guesses]);



  return (
    <>
      <Head>
        <title>HangHero</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        
      >
        <h1>HangHero</h1>

        {
          // Pick the wordLetters map and map over it to create a list of letters, and if the letter is guessed, show it, if not, show a dash
          Array.from(wordLetters).map(([letter, guessed]) => {
            return guessed ? letter : "_";
          }
        )}

        <input
          type="text"
          value={guess}
          onChange={handleInputChange}
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              handleGuess();
            }
          }}
        />

        <button onClick={handleGuess}>Guess</button>

      </main>
    </>
  );
};

export default Home;
